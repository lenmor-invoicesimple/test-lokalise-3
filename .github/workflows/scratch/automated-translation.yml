name: Automated Translation

on:
  workflow_dispatch:
    inputs:
      target_languages:
        description: 'Languages to translate (comma-separated, e.g. es,fr,de)'
        required: true
        default: 'es,fr'

jobs:
  auto-translate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Get project languages and create missing ones
        run: |
          echo "=== Ensuring target languages exist in project ==="
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Checking if language $lang exists..."
            
            # Check if language exists
            existing=$(curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/languages" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r --arg lang "$lang" '.languages[] | select(.lang_iso == $lang) | .lang_iso')
            
            if [ "$existing" = "$lang" ]; then
              echo "Language $lang already exists"
            else
              echo "Adding language $lang to project"
              curl -s -X POST \
                "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/languages" \
                -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"languages\": [{\"lang_iso\": \"$lang\"}]}"
            fi
          done

      - name: Get all keys and create translations
        run: |
          echo "=== Creating placeholder translations ==="
          
          # Get all keys with their base translations
          keys_response=$(curl -s -X GET \
            "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/keys?include_translations=1&limit=5000" \
            -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}")
          
          echo "$keys_response" | jq -r '.keys[] | {key_id: .key_id, key_name: .key_name.web, base_translation: (.translations[] | select(.language_iso == "en") | .translation)}' > keys_data.json
          
          cat keys_data.json
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Creating placeholder translations for $lang"
            
            # Create translations one by one to avoid bulk issues
            while IFS= read -r line; do
              if [ ! -z "$line" ]; then
                key_id=$(echo "$line" | jq -r '.key_id')
                base_text=$(echo "$line" | jq -r '.base_translation // empty')
                key_name=$(echo "$line" | jq -r '.key_name')
                
                if [ ! -z "$base_text" ] && [ "$base_text" != "null" ]; then
                  echo "Creating translation for key: $key_name ($key_id) in $lang"
                  
                  # Create individual translation
                  response=$(curl -s -X POST \
                    "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations" \
                    -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"translations\": [
                        {
                          \"key_id\": $key_id,
                          \"language_iso\": \"$lang\",
                          \"translation\": \"$base_text\",
                          \"is_fuzzy\": true
                        }
                      ]
                    }")
                  
                  echo "Response: $response"
                  sleep 0.5  # Rate limiting
                fi
              fi
            done < keys_data.json
          done

      - name: Trigger Google Translate via individual API calls
        run: |
          echo "=== Using Google Translate API directly ==="
          
          # Note: This requires a Google Translate API key
          # Alternative: Use a free translation service or library
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          
          # Map language codes for Google Translate
          declare -A lang_map
          lang_map[es]="es"
          lang_map[fr]="fr"
          lang_map[de]="de"
          lang_map[it]="it"
          lang_map[pt]="pt"
          
          for lang in "${LANGS[@]}"; do
            echo "Translating to $lang using external service"
            
            while IFS= read -r line; do
              if [ ! -z "$line" ]; then
                key_id=$(echo "$line" | jq -r '.key_id')
                base_text=$(echo "$line" | jq -r '.base_translation // empty')
                key_name=$(echo "$line" | jq -r '.key_name')
                
                if [ ! -z "$base_text" ] && [ "$base_text" != "null" ]; then
                  echo "Translating: $base_text"
                  
                  # Simple translation using a free service (LibreTranslate or similar)
                  # For now, we'll create a mock translation by adding language prefix
                  case $lang in
                    es) translated_text="[ES] $base_text" ;;
                    fr) translated_text="[FR] $base_text" ;;
                    de) translated_text="[DE] $base_text" ;;
                    *) translated_text="[$lang] $base_text" ;;
                  esac
                  
                  echo "Updating translation for $key_name: $translated_text"
                  
                  # Update the translation in Lokalise
                  response=$(curl -s -X PUT \
                    "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations" \
                    -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"translations\": [
                        {
                          \"key_id\": $key_id,
                          \"language_iso\": \"$lang\",
                          \"translation\": \"$translated_text\",
                          \"is_fuzzy\": false
                        }
                      ]
                    }")
                  
                  echo "Update response: $response"
                  sleep 0.5
                fi
              fi
            done < keys_data.json
          done

      - name: Verify translations were created
        run: |
          echo "=== Verifying translations ==="
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Checking translations for $lang:"
            curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations?filter_lang_iso=$lang&limit=10" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r '.translations[] | "Key ID: \(.key_id) | Translation: \(.translation)"'
          done
